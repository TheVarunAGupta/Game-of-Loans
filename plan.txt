
ðŸ§© HIGH-LEVEL OVERVIEW

User
 â”‚
 â”‚   [Run Backtest] or [Run Live Test]
 â–¼
interface/dashboard.py
 â””â”€â”€ Parses user input / triggers test
     â””â”€â”€ Calls â†’ core/strategy_runner.py
         â”œâ”€â”€ Initialises data (history or live)
         â”œâ”€â”€ Loads strategy (from /strats)
         â”œâ”€â”€ Prepares bar cache
         â””â”€â”€ Feeds bars â†’ strategy
             â””â”€â”€ Executes trades â†’ data/broker.py
                 â””â”€â”€ Records fills / positions

ðŸ—‚ COMPONENT BREAKDOWN
âœ… interface/dashboard.py
Your controller.
    Allows user to:
        Select strategy
        Choose symbol(s)
        Start backtest or live test
    Sends those choices to strategy_runner.py

âœ… core/strategy_runner.py
Your orchestrator. Key responsibilities:
    Load strategy class from /strats
    Tell data/history.py or data/live.py to fetch data
    Feed bars to the strategyâ€™s on_bar() method
    Handle warm-up checks (strategy.ready())
    Send orders to data/broker.py
    Collect and return results (metrics, logs, etc.)
It may delegate control to:
    backtester.py for replaying historical bars
    live_simulator.py for minute-by-minute live feeding

âœ… core/backtester.py
    Fetches full bar history
    Steps through bars one by one
    At each step:
        Update bar cache
        Call strategy.on_bar(bar)
        If order is returned, send it to broker

âœ… core/live_simulator.py
    On start:
        Fetch last N bars from data/history.py (for warm-up)
        Then subscribe to live feed via data/live.py
    At each new bar:
        Update cache
        Call strategy.on_bar(bar)
        Handle order execution

âœ… data/history.py
    Pulls historical bars from Alpaca or file
    Used by backtester and live mode (for warm-up)

âœ… data/live.py
    Subscribes to Alpacaâ€™s 15-minute-delayed stream
    Yields bars to live_sim.py

âœ… data/cache.py (you can add this)
    Stores most recent bars per symbol and timeframe
    API: get_last_n_bars(symbol, timeframe, n)
    Ensures strategies always get proper history

âœ… data/broker.py (your broker_sim.py)
    Receives orders from strategy
    Simulates fills
    Tracks positions, portfolio value, cash, etc.

âœ… strats/base.py
    Base class: BaseStrategy
    Required methods:
        on_bar(bar)
        ready()
        required_warmup_bars()

âœ… strats/your_strategy.py
    Your concrete implementation
    Uses price action, indicators, etc.
    Returns orders from on_bar() when ready

âœ… core/metrics.py
    Computes and stores:
        PnL
        Sharpe ratio
        Drawdowns
        Win/loss rate
    Called by runner at each step or at end

ðŸ”„ FLOW: BACKTEST MODE
    User triggers backtest
    dashboard.py calls strategy_runner.run_backtest(...)
    strategy_runner:
        Loads strategy
        Gets historical bars from data/history.py
        Passes data to backtester
    backtester:
        Replays each bar
        Updates cache
        Sends bar to strategy
        Sends order to broker if needed
    Metrics and logs collected

ðŸ”„ FLOW: LIVE TEST MODE
    User triggers live test
    dashboard.py calls strategy_runner.run_live(...)
    strategy_runner:
        Loads strategy
        Calls data/history.py to fetch N warm-up bars
        Starts live_simulator
    live_simulator:
        Pre-fills cache with history
        Starts delayed live stream
        For each new bar:
            Updates cache
            Sends bar to strategy
            Sends order to broker
    Simulated fills and metrics tracked in real time